USE BookStore;
CREATE TABLE Books
(
Id INT PRIMARY KEY IDENTITY(1,1),
Name VARCHAR (50) NOT NULL,
Price INT,
CategoryId INT, 
AuthorId INT
)

USE BookStore;
CREATE TABLE Categories
(
Id INT PRIMARY KEY,
Name VARCHAR (50) NOT NULL
)
 
USE BookStore;
CREATE TABLE Authors
(
Id INT PRIMARY KEY,
Name VARCHAR (50) NOT NULL,
)

INSERT INTO Authors
VALUES (1, 'Author-A'),
(2, 'Author-B'),
(3, 'Author-C'),
(10, 'Author-D'),
(12, 'Author-E');

INSERT INTO Categories
VALUES (1, 'Cat-A'),
(2, 'Cat-B'),
(3, 'Cat-C'),
(10, 'Cat-D'),
(12, 'Cat-E');

INSERT INTO Books 
VALUES ( 'Book-A', 100, 1, 2),
( 'Book-B', 200, 2, 2),
( 'Book-C', 150, 3, 2),
( 'Book-D', 100, 3,1),
( 'Book-E', 200, 3,1),
( 'Book-F', 150, 4,1),
( 'Book-G', 100, 5,5),
( 'Book-H', 200, 5,6),
('Book-I', 150, 7,8)

 The INNER JOIN query retrieves records from only those rows of both the tables in the JOIN query, where there is a match found between the values for the columns on which the INNER JOIN is being applied. 
 
 
 SELECT Books.CategoryId, Books.Name, Categories.Id, Categories.Name
FROM Books
INNER JOIN Categories
ON Books.CategoryId = Categories.Id;

In LEFT JOIN, all the records from the table on the left of the LEFT JOIN clause are retrieved. 

SELECT Books.CategoryId, Books.Name, Categories.id, Categories.Name
FROM Books
LEFT JOIN Categories
ON Books.CategoryId = Categories.Id


The RIGHT JOIN clause is the exact opposite of the LEFT JOIN clause. 

SELECT Books.CategoryId, Books.Name, Categories.id, Categories.Name
FROM Books
RIGHT JOIN Categories
ON Books.CategoryId = Categories.Id;

The JOIN clause retrieves all the records 

SELECT Books.CategoryId, Books.Name, Categories.id, Categories.Name
FROM Books
JOIN Categories
ON Books.CategoryId = Categories.Id;




